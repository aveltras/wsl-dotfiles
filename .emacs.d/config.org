#+TITLE: Emacs Config

* Table of Contents                                                     :TOC_3_gh:
- [[#override-defaults][Override defaults]]
- [[#theme][Theme]]
- [[#ivy][Ivy]]
- [[#flycheck][Flycheck]]
- [[#company][Company]]
- [[#text-editing][Text Editing]]
- [[#buffer-management][Buffer management]]
- [[#window-management][Window management]]
- [[#project-management][Project management]]
  - [[#magit][Magit]]
  - [[#projectile][Projectile]]
  - [[#treemacs][Treemacs]]
- [[#programming][Programming]]
  - [[#lsp][LSP]]
  - [[#direnv][Direnv]]
  - [[#rest][REST]]
  - [[#languages][Languages]]
    - [[#web][Web]]
    - [[#javascript--typescript][Javascript / TypeScript]]
    - [[#graphql][GraphQL]]
    - [[#nix][Nix]]
    - [[#rust][Rust]]
    - [[#haskell][Haskell]]
    - [[#json][JSON]]
    - [[#yaml][YAML]]
    - [[#markdown][Markdown]]
    - [[#sql][SQL]]
- [[#snippets][Snippets]]
- [[#org-mode][Org Mode]]

* Override defaults
#+BEGIN_SRC emacs-lisp :results silent
    (setq-default
      inhibit-startup-screen t
      auto-save-visited-interval 1
      make-backup-files nil
      epa-pinentry-mode 'loopback
      scroll-margin 10
      scroll-step 1
      scroll-conservatively 10000
      scroll-preserve-screen-position 1
      create-lockfiles nil)

    (load-library "iso-transl")
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (show-paren-mode t)
    (toggle-scroll-bar -1)
    (show-paren-mode t)
    (fset 'yes-or-no-p 'y-or-n-p)
    (blink-cursor-mode -1)
    (column-number-mode t)
    (delete-selection-mode 1)
    (menu-bar-mode -1)
    (toggle-scroll-bar -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (fringe-mode 1)
    (global-hl-line-mode 1)

  (setq-default left-margin-width 1 right-margin-width 1)
(setq header-line-format " ")

    (defun my/reload-emacs-configuration ()
      (interactive)
      (load-file "~/.emacs.d/init.el"))

    (use-package which-key)
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp :results silent
  (use-package solaire-mode
    :hook (after-init . solaire-global-mode))

  (add-to-list 'default-frame-alist '(font . "Fantasque Sans Mono-15"))
  (setq-default line-spacing 2)

  (use-package all-the-icons
    :if (display-graphic-p)
    :config
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t))
    (setq all-the-icons-scale-factor 0.9))

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-gruvbox t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    ;; (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom-face
    (mode-line ((t (:height 0.95))))
    (mode-line-inactive ((t (:height 0.95))))
    :config
    (setq doom-modeline-height 18)
    (setq doom-modeline-lsp t))
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp :results silent
(use-package counsel
  :config
  (ivy-mode 1)
  (global-set-key (kbd "C-s") 'swiper-isearch)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-h f") 'counsel-describe-function)
  (global-set-key (kbd "C-h v") 'counsel-describe-variable)
  (global-set-key (kbd "C-h l") 'counsel-find-library)
  (global-set-key (kbd "C-h i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "C-h u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "C-c n") 'counsel-fzf)
  (global-set-key (kbd "C-c J") 'counsel-file-jump)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) "))

(use-package ivy-posframe
  :config
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  (ivy-posframe-mode 1))

(use-package prescient
  :config (prescient-persist-mode))

(use-package ivy-prescient
  :after counsel prescient
  :config (ivy-prescient-mode))

(use-package all-the-icons-ivy-rich
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :init (ivy-rich-mode 1))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp :results silent
(use-package flycheck)
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp :results silent
(use-package company
  :hook
  (after-init . global-company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

(use-package company-prescient
  :after company prescient
  :config (company-prescient-mode))
#+END_SRC
* Text Editing
#+BEGIN_SRC emacs-lisp :results silent
(use-package undo-tree
  :init (global-undo-tree-mode))

(use-package whole-line-or-region
  :init (whole-line-or-region-global-mode))

(use-package expand-region
  :bind (("C-+" . er/contract-region)
         ("C-=" . er/expand-region)))
#+END_SRC
* Buffer management
#+BEGIN_SRC emacs-lisp :results silent
(defun me/switch-to-last-buffer ()
  (interactive)
  (switch-to-buffer nil))

(global-set-key (kbd "C-<tab>") 'me/switch-to-last-buffer)
#+END_SRC
* Window management
#+BEGIN_SRC emacs-lisp :results silent
(global-set-key (kbd "C-x é") 'split-window)
(global-set-key (kbd "C-x \"") 'split-window-horizontally)
(global-set-key (kbd "C-x &") 'delete-other-windows)
(global-set-key (kbd "C-x à") 'delete-window)
(global-set-key (kbd "C-x b") 'counsel-switch-buffer)

(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

(use-package ace-window)
#+END_SRC
* Project management
** Magit
#+BEGIN_SRC emacs-lisp :results silent
(use-package magit
  :config (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp :results silent
(use-package projectile
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1)
  (setq projectile-project-search-path '("~/Code")))

(use-package counsel-projectile
  :after projectile counsel
  :config
  (counsel-projectile-mode 1))
#+END_SRC
** Treemacs
#+BEGIN_SRC emacs-lisp :results silent
    (defun +private/treemacs-back-and-forth ()
      (interactive)
      (if (treemacs-is-treemacs-window-selected?)
      (progn
	  (aw-flip-window)
	  (treemacs))
	(treemacs-select-window)))

    (defun treemacs-visit-node-and-close (&optional arg)
      "Visit node and hide treemacs window."
      (funcall-interactively treemacs-default-visit-action arg)
      (treemacs))

  (use-package treemacs
    :config
    (setq aw-ignored-buffers (delq 'treemacs-mode aw-ignored-buffers))
    (treemacs-define-RET-action 'file-node-closed 'treemacs-visit-node-and-close)
    (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?)
    (setq treemacs-read-string-input 'from-minibuffer)
    (treemacs-resize-icons 18)

    (defun treemacs-ignore-example (filename absolute-path)
      (or (string-match-p (regexp-quote "node_modules") absolute-path)))

    (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-example)
      :bind
      (:map global-map
	("M-²" . #'+private/treemacs-back-and-forth)))

    (use-package treemacs-projectile
      :after treemacs projectile)

    (use-package treemacs-magit
      :after treemacs magit)
#+END_SRC
* Programming
** LSP
#+BEGIN_SRC emacs-lisp :results silent
(use-package lsp-mode
  :commands lsp
  :config
  (setq lsp-modeline-diagnostics-scope :project))

(use-package lsp-ui
  :config
  (global-set-key (kbd "M-p") 'lsp-ui-sideline-apply-code-actions)
  :commands lsp-ui-mode)

(use-package lsp-ivy
  :after counsel
  :commands lsp-ivy-workspace-symbol)
#+END_SRC
** Direnv
#+BEGIN_SRC emacs-lisp :results silent
  (use-package direnv
    :config
    (direnv-mode))
    ;; (use-package envrc
    ;;   :config (envrc-global-mode))
#+END_SRC
** REST
#+BEGIN_SRC emacs-lisp :results silent
(use-package restclient)
#+END_SRC
** Languages
*** Web
#+BEGIN_SRC emacs-lisp :results silent
  (use-package web-mode
    :mode (("\\.js\\'" . web-mode)
	     ("\\.jsx\\'" . web-mode)
	     ("\\.ts\\'" . web-mode)
	     ("\\.tsx\\'" . web-mode)
	     ("\\.hbs\\'" . web-mode)
	     ("\\.html\\'" . web-mode))
    :hook (web-mode . (lambda ()
		      (when (string-equal "tsx" (file-name-extension buffer-file-name))
		      (tide-setup))))
    :commands web-mode
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-part-face t)
    (setq web-mode-content-types-alist
	    '(("jsx" . "\\.js[x]?\\'")))
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    ;; (flycheck-add-mode 'typescript-tslint 'web-mode)
    )

(use-package prettier
  :hook
  (after-init . global-prettier-mode))
#+END_SRC
*** Javascript / TypeScript
#+BEGIN_SRC emacs-lisp :results silent
  ;; (use-package tide
  ;;   :after (typescript-mode company flycheck)
  ;;   :hook ((typescript-mode . tide-setup)
  ;;          (typescript-mode . tide-hl-identifier-mode)
  ;;          (before-save . tide-format-before-save)))
#+END_SRC
*** GraphQL
#+BEGIN_SRC emacs-lisp :results silent
(use-package graphql-mode)
#+END_SRC
*** Nix
#+BEGIN_SRC emacs-lisp :results silent
  (use-package nix-mode
    :mode "\\.nix\\'")
#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp :results silent
  (use-package rustic
    ;; :config (setq rustic-lsp-server 'rls)
  )
#+END_SRC
*** Haskell
#+BEGIN_SRC emacs-lisp :results silent
(use-package haskell-mode
  :config
  (setq haskell-process-type 'ghci))

(use-package lsp-haskell
  :hook
  (haskell-mode . lsp)
  (haskell-literate-mode . lsp)
  :config
  (setq lsp-haskell-formatting-provider "stylish-haskell")
  (setq lsp-haskell-server-path "haskell-language-server")
  (setq lsp-haskell-process-args-hie '()))

  ;; (use-package dante
   ;;   :after haskell-mode
   ;;   :commands 'dante-mode
   ;;   :hook
   ;;   (haskell-mode . flycheck-mode)
   ;;   (haskell-mode . dante-mode)
   ;;   :config
   ;;   (flycheck-add-next-checker 'haskell-dante '(info . haskell-hlint))
   ;;   (setq dante-methods '(bare-cabal)))
#+END_SRC
*** JSON
#+BEGIN_SRC emacs-lisp :results silent
(use-package json-mode
  :config
  (setq js-indent-level 2))
#+END_SRC
*** YAML
#+BEGIN_SRC emacs-lisp :results silent
(use-package yaml-mode)
#+END_SRC
*** Markdown
#+BEGIN_SRC emacs-lisp :results silent
(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
*** SQL
#+BEGIN_SRC emacs-lisp :results silent
(use-package sql-indent
  :hook (sql-mode . sqlind-minor-mode))
#+END_SRC
* Snippets
#+BEGIN_SRC emacs-lisp :results silent
(use-package emmet-mode
  :hook (web-mode css-mode html-mode))

(use-package yasnippet
  :hook (prog-mode . yas-minor-mode))
#+END_SRC
* Org Mode
#+BEGIN_SRC emacs-lisp :results silent
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

(use-package toc-org
  :after org
  :hook (org-mode . toc-org-mode))
#+END_SRC

